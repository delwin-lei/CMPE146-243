   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"queue.c"
  16              		.text
  17              		.align	1
  18              		.thumb
  19              		.thumb_func
  21              	prvCopyDataToQueue:
  22              		@ args = 0, pretend = 0, frame = 0
  23              		@ frame_needed = 0, uses_anonymous_args = 0
  24 0000 38B5     		push	{r3, r4, r5, lr}
  25 0002 1546     		mov	r5, r2
  26 0004 026C     		ldr	r2, [r0, #64]
  27 0006 0446     		mov	r4, r0
  28 0008 32B9     		cbnz	r2, .L2
  29 000a 0568     		ldr	r5, [r0]
  30 000c 3DBB     		cbnz	r5, .L4
  31 000e 4068     		ldr	r0, [r0, #4]
  32 0010 FFF7FEFF 		bl	vTaskPriorityDisinherit
  33 0014 6560     		str	r5, [r4, #4]
  34 0016 22E0     		b	.L4
  35              	.L2:
  36 0018 65B9     		cbnz	r5, .L5
  37 001a 8068     		ldr	r0, [r0, #8]
  38 001c FFF7FEFF 		bl	memcpy
  39 0020 A268     		ldr	r2, [r4, #8]
  40 0022 236C     		ldr	r3, [r4, #64]
  41 0024 1344     		add	r3, r3, r2
  42 0026 6268     		ldr	r2, [r4, #4]
  43 0028 A360     		str	r3, [r4, #8]
  44 002a 9342     		cmp	r3, r2
  45 002c 17D3     		bcc	.L4
  46 002e 2368     		ldr	r3, [r4]
  47 0030 A360     		str	r3, [r4, #8]
  48 0032 14E0     		b	.L4
  49              	.L5:
  50 0034 C068     		ldr	r0, [r0, #12]
  51 0036 FFF7FEFF 		bl	memcpy
  52 003a 236C     		ldr	r3, [r4, #64]
  53 003c E268     		ldr	r2, [r4, #12]
  54 003e 5B42     		negs	r3, r3
  55 0040 2168     		ldr	r1, [r4]
  56 0042 1A44     		add	r2, r2, r3
  57 0044 8A42     		cmp	r2, r1
  58 0046 E260     		str	r2, [r4, #12]
  59 0048 3EBF     		ittt	cc
  60 004a 6268     		ldrcc	r2, [r4, #4]
  61 004c 9B18     		addcc	r3, r3, r2
  62 004e E360     		strcc	r3, [r4, #12]
  63 0050 022D     		cmp	r5, #2
  64 0052 04D1     		bne	.L4
  65 0054 A36B     		ldr	r3, [r4, #56]
  66 0056 13B1     		cbz	r3, .L4
  67 0058 A36B     		ldr	r3, [r4, #56]
  68 005a 013B     		subs	r3, r3, #1
  69 005c A363     		str	r3, [r4, #56]
  70              	.L4:
  71 005e A36B     		ldr	r3, [r4, #56]
  72 0060 0133     		adds	r3, r3, #1
  73 0062 A363     		str	r3, [r4, #56]
  74 0064 38BD     		pop	{r3, r4, r5, pc}
  76              		.align	1
  77              		.thumb
  78              		.thumb_func
  80              	prvNotifyQueueSetContainer:
  81              		@ args = 0, pretend = 0, frame = 8
  82              		@ frame_needed = 0, uses_anonymous_args = 0
  83 0066 13B5     		push	{r0, r1, r4, lr}
  84 0068 046D     		ldr	r4, [r0, #80]
  85 006a 0A46     		mov	r2, r1
  86 006c E36B     		ldr	r3, [r4, #60]
  87 006e A16B     		ldr	r1, [r4, #56]
  88 0070 0190     		str	r0, [sp, #4]
  89 0072 9942     		cmp	r1, r3
  90 0074 01D3     		bcc	.L13
  91              	.L15:
  92 0076 0020     		movs	r0, #0
  93 0078 0DE0     		b	.L14
  94              	.L13:
  95 007a 01A9     		add	r1, sp, #4
  96 007c 2046     		mov	r0, r4
  97 007e FFF7BFFF 		bl	prvCopyDataToQueue
  98 0082 636A     		ldr	r3, [r4, #36]
  99 0084 002B     		cmp	r3, #0
 100 0086 F6D0     		beq	.L15
 101 0088 04F12400 		add	r0, r4, #36
 102 008c FFF7FEFF 		bl	xTaskRemoveFromEventList
 103 0090 0030     		adds	r0, r0, #0
 104 0092 18BF     		it	ne
 105 0094 0120     		movne	r0, #1
 106              	.L14:
 107 0096 02B0     		add	sp, sp, #8
 108              		@ sp needed
 109 0098 10BD     		pop	{r4, pc}
 111              		.align	1
 112              		.thumb
 113              		.thumb_func
 115              	prvCopyDataFromQueue:
 116              		@ args = 0, pretend = 0, frame = 0
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118              		@ link register save eliminated.
 119 009a 0346     		mov	r3, r0
 120 009c 30B4     		push	{r4, r5}
 121 009e 1C68     		ldr	r4, [r3]
 122 00a0 0846     		mov	r0, r1
 123 00a2 5CB1     		cbz	r4, .L19
 124 00a4 D968     		ldr	r1, [r3, #12]
 125 00a6 1A6C     		ldr	r2, [r3, #64]
 126 00a8 5D68     		ldr	r5, [r3, #4]
 127 00aa 1144     		add	r1, r1, r2
 128 00ac A942     		cmp	r1, r5
 129 00ae D960     		str	r1, [r3, #12]
 130 00b0 28BF     		it	cs
 131 00b2 DC60     		strcs	r4, [r3, #12]
 132 00b4 D968     		ldr	r1, [r3, #12]
 133 00b6 30BC     		pop	{r4, r5}
 134 00b8 FFF7FEBF 		b	memcpy
 135              	.L19:
 136 00bc 30BC     		pop	{r4, r5}
 137 00be 7047     		bx	lr
 139              		.align	1
 140              		.thumb
 141              		.thumb_func
 143              	prvUnlockQueue:
 144              		@ args = 0, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146 00c0 38B5     		push	{r3, r4, r5, lr}
 147 00c2 0446     		mov	r4, r0
 148 00c4 FFF7FEFF 		bl	vPortEnterCritical
 149 00c8 04F12405 		add	r5, r4, #36
 150              	.L23:
 151 00cc A36C     		ldr	r3, [r4, #72]
 152 00ce 002B     		cmp	r3, #0
 153 00d0 15DD     		ble	.L27
 154 00d2 236D     		ldr	r3, [r4, #80]
 155 00d4 43B1     		cbz	r3, .L24
 156 00d6 0021     		movs	r1, #0
 157 00d8 2046     		mov	r0, r4
 158 00da FFF7C4FF 		bl	prvNotifyQueueSetContainer
 159 00de 0128     		cmp	r0, #1
 160 00e0 09D1     		bne	.L26
 161              	.L25:
 162 00e2 FFF7FEFF 		bl	vTaskMissedYield
 163 00e6 06E0     		b	.L26
 164              	.L24:
 165 00e8 636A     		ldr	r3, [r4, #36]
 166 00ea 43B1     		cbz	r3, .L27
 167 00ec 2846     		mov	r0, r5
 168 00ee FFF7FEFF 		bl	xTaskRemoveFromEventList
 169 00f2 0028     		cmp	r0, #0
 170 00f4 F5D1     		bne	.L25
 171              	.L26:
 172 00f6 A36C     		ldr	r3, [r4, #72]
 173 00f8 013B     		subs	r3, r3, #1
 174 00fa A364     		str	r3, [r4, #72]
 175 00fc E6E7     		b	.L23
 176              	.L27:
 177 00fe 4FF0FF33 		mov	r3, #-1
 178 0102 A364     		str	r3, [r4, #72]
 179 0104 FFF7FEFF 		bl	vPortExitCritical
 180 0108 FFF7FEFF 		bl	vPortEnterCritical
 181 010c 04F11005 		add	r5, r4, #16
 182              	.L30:
 183 0110 636C     		ldr	r3, [r4, #68]
 184 0112 002B     		cmp	r3, #0
 185 0114 0BDD     		ble	.L31
 186 0116 2369     		ldr	r3, [r4, #16]
 187 0118 4BB1     		cbz	r3, .L31
 188 011a 2846     		mov	r0, r5
 189 011c FFF7FEFF 		bl	xTaskRemoveFromEventList
 190 0120 08B1     		cbz	r0, .L32
 191 0122 FFF7FEFF 		bl	vTaskMissedYield
 192              	.L32:
 193 0126 636C     		ldr	r3, [r4, #68]
 194 0128 013B     		subs	r3, r3, #1
 195 012a 6364     		str	r3, [r4, #68]
 196 012c F0E7     		b	.L30
 197              	.L31:
 198 012e 4FF0FF33 		mov	r3, #-1
 199 0132 6364     		str	r3, [r4, #68]
 200 0134 BDE83840 		pop	{r3, r4, r5, lr}
 201 0138 FFF7FEBF 		b	vPortExitCritical
 203              		.align	1
 204              		.global	xQueueGenericReset
 205              		.thumb
 206              		.thumb_func
 208              	xQueueGenericReset:
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 0, uses_anonymous_args = 0
 211 013c 38B5     		push	{r3, r4, r5, lr}
 212 013e 0446     		mov	r4, r0
 213 0140 0D46     		mov	r5, r1
 214 0142 FFF7FEFF 		bl	vPortEnterCritical
 215 0146 206C     		ldr	r0, [r4, #64]
 216 0148 E36B     		ldr	r3, [r4, #60]
 217 014a 2268     		ldr	r2, [r4]
 218 014c 4343     		muls	r3, r0, r3
 219 014e D118     		adds	r1, r2, r3
 220 0150 1B1A     		subs	r3, r3, r0
 221 0152 1344     		add	r3, r3, r2
 222 0154 6160     		str	r1, [r4, #4]
 223 0156 E360     		str	r3, [r4, #12]
 224 0158 0021     		movs	r1, #0
 225 015a 4FF0FF33 		mov	r3, #-1
 226 015e A163     		str	r1, [r4, #56]
 227 0160 A260     		str	r2, [r4, #8]
 228 0162 6364     		str	r3, [r4, #68]
 229 0164 A364     		str	r3, [r4, #72]
 230 0166 55B9     		cbnz	r5, .L47
 231 0168 2369     		ldr	r3, [r4, #16]
 232 016a 83B1     		cbz	r3, .L49
 233 016c 04F11000 		add	r0, r4, #16
 234 0170 FFF7FEFF 		bl	xTaskRemoveFromEventList
 235 0174 0128     		cmp	r0, #1
 236 0176 0AD1     		bne	.L49
 237 0178 FFF7FEFF 		bl	vPortYield
 238 017c 07E0     		b	.L49
 239              	.L47:
 240 017e 04F11000 		add	r0, r4, #16
 241 0182 FFF7FEFF 		bl	vListInitialise
 242 0186 04F12400 		add	r0, r4, #36
 243 018a FFF7FEFF 		bl	vListInitialise
 244              	.L49:
 245 018e FFF7FEFF 		bl	vPortExitCritical
 246 0192 0120     		movs	r0, #1
 247 0194 38BD     		pop	{r3, r4, r5, pc}
 249              		.align	1
 250              		.global	xQueueGenericCreate
 251              		.thumb
 252              		.thumb_func
 254              	xQueueGenericCreate:
 255              		@ args = 0, pretend = 0, frame = 0
 256              		@ frame_needed = 0, uses_anonymous_args = 0
 257 0196 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 258 019a 0F46     		mov	r7, r1
 259 019c 9046     		mov	r8, r2
 260 019e 0646     		mov	r6, r0
 261 01a0 08B9     		cbnz	r0, .L52
 262              	.L54:
 263 01a2 0024     		movs	r4, #0
 264 01a4 1CE0     		b	.L53
 265              	.L52:
 266 01a6 5420     		movs	r0, #84
 267 01a8 FFF7FEFF 		bl	pvPortMalloc
 268 01ac 0446     		mov	r4, r0
 269 01ae 0028     		cmp	r0, #0
 270 01b0 F7D0     		beq	.L54
 271 01b2 07FB06F0 		mul	r0, r7, r6
 272 01b6 0130     		adds	r0, r0, #1
 273 01b8 FFF7FEFF 		bl	pvPortMalloc
 274 01bc 0546     		mov	r5, r0
 275 01be 2060     		str	r0, [r4]
 276 01c0 50B1     		cbz	r0, .L55
 277 01c2 E663     		str	r6, [r4, #60]
 278 01c4 2764     		str	r7, [r4, #64]
 279 01c6 0121     		movs	r1, #1
 280 01c8 2046     		mov	r0, r4
 281 01ca FFF7FEFF 		bl	xQueueGenericReset
 282 01ce 0023     		movs	r3, #0
 283 01d0 84F84D80 		strb	r8, [r4, #77]
 284 01d4 2365     		str	r3, [r4, #80]
 285 01d6 03E0     		b	.L53
 286              	.L55:
 287 01d8 2046     		mov	r0, r4
 288 01da FFF7FEFF 		bl	vPortFree
 289 01de 2C46     		mov	r4, r5
 290              	.L53:
 291 01e0 2046     		mov	r0, r4
 292 01e2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 294              		.align	1
 295              		.global	xQueueCreateCountingSemaphore
 296              		.thumb
 297              		.thumb_func
 299              	xQueueCreateCountingSemaphore:
 300              		@ args = 0, pretend = 0, frame = 0
 301              		@ frame_needed = 0, uses_anonymous_args = 0
 302 01e6 10B5     		push	{r4, lr}
 303 01e8 0222     		movs	r2, #2
 304 01ea 0C46     		mov	r4, r1
 305 01ec 0021     		movs	r1, #0
 306 01ee FFF7FEFF 		bl	xQueueGenericCreate
 307 01f2 00B1     		cbz	r0, .L60
 308 01f4 8463     		str	r4, [r0, #56]
 309              	.L60:
 310 01f6 10BD     		pop	{r4, pc}
 312              		.align	1
 313              		.global	xQueueGenericSend
 314              		.thumb
 315              		.thumb_func
 317              	xQueueGenericSend:
 318              		@ args = 0, pretend = 0, frame = 16
 319              		@ frame_needed = 0, uses_anonymous_args = 0
 320 01f8 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 321 01fc 0027     		movs	r7, #0
 322 01fe 0446     		mov	r4, r0
 323 0200 8946     		mov	r9, r1
 324 0202 1E46     		mov	r6, r3
 325 0204 B846     		mov	r8, r7
 326 0206 85B0     		sub	sp, sp, #20
 327 0208 0192     		str	r2, [sp, #4]
 328              	.L65:
 329 020a FFF7FEFF 		bl	vPortEnterCritical
 330 020e A26B     		ldr	r2, [r4, #56]
 331 0210 E36B     		ldr	r3, [r4, #60]
 332 0212 9A42     		cmp	r2, r3
 333 0214 01D3     		bcc	.L66
 334 0216 022E     		cmp	r6, #2
 335 0218 1AD1     		bne	.L67
 336              	.L66:
 337 021a 3246     		mov	r2, r6
 338 021c 4946     		mov	r1, r9
 339 021e 2046     		mov	r0, r4
 340 0220 FFF7EEFE 		bl	prvCopyDataToQueue
 341 0224 236D     		ldr	r3, [r4, #80]
 342 0226 43B1     		cbz	r3, .L68
 343 0228 3146     		mov	r1, r6
 344 022a 2046     		mov	r0, r4
 345 022c FFF71BFF 		bl	prvNotifyQueueSetContainer
 346              	.L89:
 347 0230 0128     		cmp	r0, #1
 348 0232 09D1     		bne	.L70
 349 0234 FFF7FEFF 		bl	vPortYield
 350 0238 06E0     		b	.L70
 351              	.L68:
 352 023a 636A     		ldr	r3, [r4, #36]
 353 023c 23B1     		cbz	r3, .L70
 354 023e 04F12400 		add	r0, r4, #36
 355 0242 FFF7FEFF 		bl	xTaskRemoveFromEventList
 356 0246 F3E7     		b	.L89
 357              	.L70:
 358 0248 FFF7FEFF 		bl	vPortExitCritical
 359 024c 0120     		movs	r0, #1
 360 024e 44E0     		b	.L72
 361              	.L67:
 362 0250 019D     		ldr	r5, [sp, #4]
 363 0252 1DB9     		cbnz	r5, .L73
 364 0254 FFF7FEFF 		bl	vPortExitCritical
 365 0258 2846     		mov	r0, r5
 366 025a 3EE0     		b	.L72
 367              	.L73:
 368 025c 17B9     		cbnz	r7, .L74
 369 025e 02A8     		add	r0, sp, #8
 370 0260 FFF7FEFF 		bl	vTaskSetTimeOutState
 371              	.L74:
 372 0264 FFF7FEFF 		bl	vPortExitCritical
 373 0268 FFF7FEFF 		bl	vTaskSuspendAll
 374 026c FFF7FEFF 		bl	vPortEnterCritical
 375 0270 636C     		ldr	r3, [r4, #68]
 376 0272 0133     		adds	r3, r3, #1
 377 0274 08BF     		it	eq
 378 0276 C4F84480 		streq	r8, [r4, #68]
 379 027a A36C     		ldr	r3, [r4, #72]
 380 027c 0133     		adds	r3, r3, #1
 381 027e 08BF     		it	eq
 382 0280 C4F84880 		streq	r8, [r4, #72]
 383 0284 FFF7FEFF 		bl	vPortExitCritical
 384 0288 01A9     		add	r1, sp, #4
 385 028a 02A8     		add	r0, sp, #8
 386 028c FFF7FEFF 		bl	xTaskCheckForTimeOut
 387 0290 E8B9     		cbnz	r0, .L77
 388 0292 FFF7FEFF 		bl	vPortEnterCritical
 389 0296 A76B     		ldr	r7, [r4, #56]
 390 0298 E56B     		ldr	r5, [r4, #60]
 391 029a FFF7FEFF 		bl	vPortExitCritical
 392 029e AF42     		cmp	r7, r5
 393 02a0 0FD1     		bne	.L78
 394 02a2 0199     		ldr	r1, [sp, #4]
 395 02a4 04F11000 		add	r0, r4, #16
 396 02a8 FFF7FEFF 		bl	vTaskPlaceOnEventList
 397 02ac 2046     		mov	r0, r4
 398 02ae FFF707FF 		bl	prvUnlockQueue
 399 02b2 FFF7FEFF 		bl	xTaskResumeAll
 400 02b6 08B1     		cbz	r0, .L90
 401              	.L79:
 402 02b8 0127     		movs	r7, #1
 403 02ba A6E7     		b	.L65
 404              	.L90:
 405 02bc FFF7FEFF 		bl	vPortYield
 406 02c0 FAE7     		b	.L79
 407              	.L78:
 408 02c2 2046     		mov	r0, r4
 409 02c4 FFF7FCFE 		bl	prvUnlockQueue
 410 02c8 FFF7FEFF 		bl	xTaskResumeAll
 411 02cc F4E7     		b	.L79
 412              	.L77:
 413 02ce 2046     		mov	r0, r4
 414 02d0 FFF7F6FE 		bl	prvUnlockQueue
 415 02d4 FFF7FEFF 		bl	xTaskResumeAll
 416 02d8 0020     		movs	r0, #0
 417              	.L72:
 418 02da 05B0     		add	sp, sp, #20
 419              		@ sp needed
 420 02dc BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 422              		.align	1
 423              		.global	xQueueCreateMutex
 424              		.thumb
 425              		.thumb_func
 427              	xQueueCreateMutex:
 428              		@ args = 0, pretend = 0, frame = 0
 429              		@ frame_needed = 0, uses_anonymous_args = 0
 430 02e0 70B5     		push	{r4, r5, r6, lr}
 431 02e2 0646     		mov	r6, r0
 432 02e4 5420     		movs	r0, #84
 433 02e6 FFF7FEFF 		bl	pvPortMalloc
 434 02ea 0446     		mov	r4, r0
 435 02ec E0B1     		cbz	r0, .L92
 436 02ee 0123     		movs	r3, #1
 437 02f0 0025     		movs	r5, #0
 438 02f2 C363     		str	r3, [r0, #60]
 439 02f4 4FF0FF33 		mov	r3, #-1
 440 02f8 8563     		str	r5, [r0, #56]
 441 02fa 4560     		str	r5, [r0, #4]
 442 02fc 4364     		str	r3, [r0, #68]
 443 02fe 0560     		str	r5, [r0]
 444 0300 8364     		str	r3, [r0, #72]
 445 0302 8560     		str	r5, [r0, #8]
 446 0304 C560     		str	r5, [r0, #12]
 447 0306 0564     		str	r5, [r0, #64]
 448 0308 80F84D60 		strb	r6, [r0, #77]
 449 030c 0565     		str	r5, [r0, #80]
 450 030e 1030     		adds	r0, r0, #16
 451 0310 FFF7FEFF 		bl	vListInitialise
 452 0314 04F12400 		add	r0, r4, #36
 453 0318 FFF7FEFF 		bl	vListInitialise
 454 031c 2B46     		mov	r3, r5
 455 031e 2A46     		mov	r2, r5
 456 0320 2946     		mov	r1, r5
 457 0322 2046     		mov	r0, r4
 458 0324 FFF7FEFF 		bl	xQueueGenericSend
 459              	.L92:
 460 0328 2046     		mov	r0, r4
 461 032a 70BD     		pop	{r4, r5, r6, pc}
 463              		.align	1
 464              		.global	xQueueGenericSendFromISR
 465              		.thumb
 466              		.thumb_func
 468              	xQueueGenericSendFromISR:
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471 032c 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 472 0330 0446     		mov	r4, r0
 473 0332 1646     		mov	r6, r2
 474 0334 1D46     		mov	r5, r3
 475 0336 8846     		mov	r8, r1
 476 0338 FFF7FEFF 		bl	ulPortSetInterruptMask
 477 033c A26B     		ldr	r2, [r4, #56]
 478 033e E36B     		ldr	r3, [r4, #60]
 479 0340 0746     		mov	r7, r0
 480 0342 9A42     		cmp	r2, r3
 481 0344 01D3     		bcc	.L97
 482 0346 022D     		cmp	r5, #2
 483 0348 20D1     		bne	.L103
 484              	.L97:
 485 034a 2A46     		mov	r2, r5
 486 034c 4146     		mov	r1, r8
 487 034e 2046     		mov	r0, r4
 488 0350 FFF756FE 		bl	prvCopyDataToQueue
 489 0354 A36C     		ldr	r3, [r4, #72]
 490 0356 0133     		adds	r3, r3, #1
 491 0358 13D1     		bne	.L99
 492 035a 236D     		ldr	r3, [r4, #80]
 493 035c 33B1     		cbz	r3, .L100
 494 035e 2946     		mov	r1, r5
 495 0360 2046     		mov	r0, r4
 496 0362 FFF780FE 		bl	prvNotifyQueueSetContainer
 497 0366 0128     		cmp	r0, #1
 498 0368 0ED1     		bne	.L113
 499 036a 06E0     		b	.L101
 500              	.L100:
 501 036c 636A     		ldr	r3, [r4, #36]
 502 036e 5BB1     		cbz	r3, .L113
 503 0370 04F12400 		add	r0, r4, #36
 504 0374 FFF7FEFF 		bl	xTaskRemoveFromEventList
 505 0378 30B1     		cbz	r0, .L113
 506              	.L101:
 507 037a 2EB1     		cbz	r6, .L113
 508 037c 0124     		movs	r4, #1
 509 037e 3460     		str	r4, [r6]
 510 0380 05E0     		b	.L98
 511              	.L99:
 512 0382 A36C     		ldr	r3, [r4, #72]
 513 0384 0133     		adds	r3, r3, #1
 514 0386 A364     		str	r3, [r4, #72]
 515              	.L113:
 516 0388 0124     		movs	r4, #1
 517 038a 00E0     		b	.L98
 518              	.L103:
 519 038c 0024     		movs	r4, #0
 520              	.L98:
 521 038e 3846     		mov	r0, r7
 522 0390 FFF7FEFF 		bl	vPortClearInterruptMask
 523 0394 2046     		mov	r0, r4
 524 0396 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 526              		.align	1
 527              		.global	xQueueGenericReceive
 528              		.thumb
 529              		.thumb_func
 531              	xQueueGenericReceive:
 532              		@ args = 0, pretend = 0, frame = 16
 533              		@ frame_needed = 0, uses_anonymous_args = 0
 534 039a 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 535 039e 0026     		movs	r6, #0
 536 03a0 0446     		mov	r4, r0
 537 03a2 8846     		mov	r8, r1
 538 03a4 9946     		mov	r9, r3
 539 03a6 3746     		mov	r7, r6
 540 03a8 85B0     		sub	sp, sp, #20
 541 03aa 0192     		str	r2, [sp, #4]
 542              	.L115:
 543 03ac FFF7FEFF 		bl	vPortEnterCritical
 544 03b0 A36B     		ldr	r3, [r4, #56]
 545 03b2 3BB3     		cbz	r3, .L116
 546 03b4 4146     		mov	r1, r8
 547 03b6 2046     		mov	r0, r4
 548 03b8 E568     		ldr	r5, [r4, #12]
 549 03ba FFF76EFE 		bl	prvCopyDataFromQueue
 550 03be B9F1000F 		cmp	r9, #0
 551 03c2 12D1     		bne	.L117
 552 03c4 A36B     		ldr	r3, [r4, #56]
 553 03c6 013B     		subs	r3, r3, #1
 554 03c8 A363     		str	r3, [r4, #56]
 555 03ca 2368     		ldr	r3, [r4]
 556 03cc 13B9     		cbnz	r3, .L118
 557 03ce FFF7FEFF 		bl	xTaskGetCurrentTaskHandle
 558 03d2 6060     		str	r0, [r4, #4]
 559              	.L118:
 560 03d4 2369     		ldr	r3, [r4, #16]
 561 03d6 8BB1     		cbz	r3, .L120
 562 03d8 04F11000 		add	r0, r4, #16
 563 03dc FFF7FEFF 		bl	xTaskRemoveFromEventList
 564 03e0 0128     		cmp	r0, #1
 565 03e2 0BD1     		bne	.L120
 566              	.L122:
 567 03e4 FFF7FEFF 		bl	vPortYield
 568 03e8 08E0     		b	.L120
 569              	.L117:
 570 03ea 636A     		ldr	r3, [r4, #36]
 571 03ec E560     		str	r5, [r4, #12]
 572 03ee 2BB1     		cbz	r3, .L120
 573 03f0 04F12400 		add	r0, r4, #36
 574 03f4 FFF7FEFF 		bl	xTaskRemoveFromEventList
 575 03f8 0028     		cmp	r0, #0
 576 03fa F3D1     		bne	.L122
 577              	.L120:
 578 03fc FFF7FEFF 		bl	vPortExitCritical
 579 0400 0120     		movs	r0, #1
 580 0402 49E0     		b	.L123
 581              	.L116:
 582 0404 019D     		ldr	r5, [sp, #4]
 583 0406 1DB9     		cbnz	r5, .L124
 584 0408 FFF7FEFF 		bl	vPortExitCritical
 585 040c 2846     		mov	r0, r5
 586 040e 43E0     		b	.L123
 587              	.L124:
 588 0410 16B9     		cbnz	r6, .L125
 589 0412 02A8     		add	r0, sp, #8
 590 0414 FFF7FEFF 		bl	vTaskSetTimeOutState
 591              	.L125:
 592 0418 FFF7FEFF 		bl	vPortExitCritical
 593 041c FFF7FEFF 		bl	vTaskSuspendAll
 594 0420 FFF7FEFF 		bl	vPortEnterCritical
 595 0424 636C     		ldr	r3, [r4, #68]
 596 0426 0133     		adds	r3, r3, #1
 597 0428 08BF     		it	eq
 598 042a 6764     		streq	r7, [r4, #68]
 599 042c A36C     		ldr	r3, [r4, #72]
 600 042e 0133     		adds	r3, r3, #1
 601 0430 08BF     		it	eq
 602 0432 A764     		streq	r7, [r4, #72]
 603 0434 FFF7FEFF 		bl	vPortExitCritical
 604 0438 01A9     		add	r1, sp, #4
 605 043a 02A8     		add	r0, sp, #8
 606 043c FFF7FEFF 		bl	xTaskCheckForTimeOut
 607 0440 20BB     		cbnz	r0, .L128
 608 0442 FFF7FEFF 		bl	vPortEnterCritical
 609 0446 A56B     		ldr	r5, [r4, #56]
 610 0448 FFF7FEFF 		bl	vPortExitCritical
 611 044c C5B9     		cbnz	r5, .L129
 612 044e 2368     		ldr	r3, [r4]
 613 0450 33B9     		cbnz	r3, .L130
 614 0452 FFF7FEFF 		bl	vPortEnterCritical
 615 0456 6068     		ldr	r0, [r4, #4]
 616 0458 FFF7FEFF 		bl	vTaskPriorityInherit
 617 045c FFF7FEFF 		bl	vPortExitCritical
 618              	.L130:
 619 0460 0199     		ldr	r1, [sp, #4]
 620 0462 04F12400 		add	r0, r4, #36
 621 0466 FFF7FEFF 		bl	vTaskPlaceOnEventList
 622 046a 2046     		mov	r0, r4
 623 046c FFF728FE 		bl	prvUnlockQueue
 624 0470 FFF7FEFF 		bl	xTaskResumeAll
 625 0474 08B1     		cbz	r0, .L135
 626              	.L131:
 627 0476 0126     		movs	r6, #1
 628 0478 98E7     		b	.L115
 629              	.L135:
 630 047a FFF7FEFF 		bl	vPortYield
 631 047e FAE7     		b	.L131
 632              	.L129:
 633 0480 2046     		mov	r0, r4
 634 0482 FFF71DFE 		bl	prvUnlockQueue
 635 0486 FFF7FEFF 		bl	xTaskResumeAll
 636 048a F4E7     		b	.L131
 637              	.L128:
 638 048c 2046     		mov	r0, r4
 639 048e FFF717FE 		bl	prvUnlockQueue
 640 0492 FFF7FEFF 		bl	xTaskResumeAll
 641 0496 0020     		movs	r0, #0
 642              	.L123:
 643 0498 05B0     		add	sp, sp, #20
 644              		@ sp needed
 645 049a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 647              		.align	1
 648              		.global	xQueueReceiveFromISR
 649              		.thumb
 650              		.thumb_func
 652              	xQueueReceiveFromISR:
 653              		@ args = 0, pretend = 0, frame = 0
 654              		@ frame_needed = 0, uses_anonymous_args = 0
 655 049e 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 656 04a2 0546     		mov	r5, r0
 657 04a4 8846     		mov	r8, r1
 658 04a6 1746     		mov	r7, r2
 659 04a8 FFF7FEFF 		bl	ulPortSetInterruptMask
 660 04ac AC6B     		ldr	r4, [r5, #56]
 661 04ae 0646     		mov	r6, r0
 662 04b0 C4B1     		cbz	r4, .L137
 663 04b2 4146     		mov	r1, r8
 664 04b4 2846     		mov	r0, r5
 665 04b6 FFF7F0FD 		bl	prvCopyDataFromQueue
 666 04ba AB6B     		ldr	r3, [r5, #56]
 667 04bc 013B     		subs	r3, r3, #1
 668 04be AB63     		str	r3, [r5, #56]
 669 04c0 6B6C     		ldr	r3, [r5, #68]
 670 04c2 0133     		adds	r3, r3, #1
 671 04c4 0AD1     		bne	.L138
 672 04c6 2B69     		ldr	r3, [r5, #16]
 673 04c8 5BB1     		cbz	r3, .L148
 674 04ca 05F11000 		add	r0, r5, #16
 675 04ce FFF7FEFF 		bl	xTaskRemoveFromEventList
 676 04d2 30B1     		cbz	r0, .L148
 677 04d4 2FB1     		cbz	r7, .L148
 678 04d6 0124     		movs	r4, #1
 679 04d8 3C60     		str	r4, [r7]
 680 04da 03E0     		b	.L137
 681              	.L138:
 682 04dc 6B6C     		ldr	r3, [r5, #68]
 683 04de 0133     		adds	r3, r3, #1
 684 04e0 6B64     		str	r3, [r5, #68]
 685              	.L148:
 686 04e2 0124     		movs	r4, #1
 687              	.L137:
 688 04e4 3046     		mov	r0, r6
 689 04e6 FFF7FEFF 		bl	vPortClearInterruptMask
 690 04ea 2046     		mov	r0, r4
 691 04ec BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 693              		.align	1
 694              		.global	xQueuePeekFromISR
 695              		.thumb
 696              		.thumb_func
 698              	xQueuePeekFromISR:
 699              		@ args = 0, pretend = 0, frame = 0
 700              		@ frame_needed = 0, uses_anonymous_args = 0
 701 04f0 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 702 04f2 0546     		mov	r5, r0
 703 04f4 0F46     		mov	r7, r1
 704 04f6 FFF7FEFF 		bl	ulPortSetInterruptMask
 705 04fa AC6B     		ldr	r4, [r5, #56]
 706 04fc 0646     		mov	r6, r0
 707 04fe 34B1     		cbz	r4, .L150
 708 0500 EC68     		ldr	r4, [r5, #12]
 709 0502 3946     		mov	r1, r7
 710 0504 2846     		mov	r0, r5
 711 0506 FFF7C8FD 		bl	prvCopyDataFromQueue
 712 050a EC60     		str	r4, [r5, #12]
 713 050c 0124     		movs	r4, #1
 714              	.L150:
 715 050e 3046     		mov	r0, r6
 716 0510 FFF7FEFF 		bl	vPortClearInterruptMask
 717 0514 2046     		mov	r0, r4
 718 0516 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 720              		.align	1
 721              		.global	uxQueueMessagesWaiting
 722              		.thumb
 723              		.thumb_func
 725              	uxQueueMessagesWaiting:
 726              		@ args = 0, pretend = 0, frame = 0
 727              		@ frame_needed = 0, uses_anonymous_args = 0
 728 0518 10B5     		push	{r4, lr}
 729 051a 0446     		mov	r4, r0
 730 051c FFF7FEFF 		bl	vPortEnterCritical
 731 0520 A46B     		ldr	r4, [r4, #56]
 732 0522 FFF7FEFF 		bl	vPortExitCritical
 733 0526 2046     		mov	r0, r4
 734 0528 10BD     		pop	{r4, pc}
 736              		.align	1
 737              		.global	uxQueueMessagesWaitingFromISR
 738              		.thumb
 739              		.thumb_func
 741              	uxQueueMessagesWaitingFromISR:
 742              		@ args = 0, pretend = 0, frame = 0
 743              		@ frame_needed = 0, uses_anonymous_args = 0
 744              		@ link register save eliminated.
 745 052a 806B     		ldr	r0, [r0, #56]
 746 052c 7047     		bx	lr
 748              		.align	1
 749              		.global	vQueueDelete
 750              		.thumb
 751              		.thumb_func
 753              	vQueueDelete:
 754              		@ args = 0, pretend = 0, frame = 0
 755              		@ frame_needed = 0, uses_anonymous_args = 0
 756 052e 10B5     		push	{r4, lr}
 757 0530 0446     		mov	r4, r0
 758 0532 0068     		ldr	r0, [r0]
 759 0534 FFF7FEFF 		bl	vPortFree
 760 0538 2046     		mov	r0, r4
 761 053a BDE81040 		pop	{r4, lr}
 762 053e FFF7FEBF 		b	vPortFree
 764              		.align	1
 765              		.global	ucQueueGetQueueNumber
 766              		.thumb
 767              		.thumb_func
 769              	ucQueueGetQueueNumber:
 770              		@ args = 0, pretend = 0, frame = 0
 771              		@ frame_needed = 0, uses_anonymous_args = 0
 772              		@ link register save eliminated.
 773 0542 90F84C00 		ldrb	r0, [r0, #76]	@ zero_extendqisi2
 774 0546 7047     		bx	lr
 776              		.align	1
 777              		.global	vQueueSetQueueNumber
 778              		.thumb
 779              		.thumb_func
 781              	vQueueSetQueueNumber:
 782              		@ args = 0, pretend = 0, frame = 0
 783              		@ frame_needed = 0, uses_anonymous_args = 0
 784              		@ link register save eliminated.
 785 0548 80F84C10 		strb	r1, [r0, #76]
 786 054c 7047     		bx	lr
 788              		.align	1
 789              		.global	ucQueueGetQueueType
 790              		.thumb
 791              		.thumb_func
 793              	ucQueueGetQueueType:
 794              		@ args = 0, pretend = 0, frame = 0
 795              		@ frame_needed = 0, uses_anonymous_args = 0
 796              		@ link register save eliminated.
 797 054e 90F84D00 		ldrb	r0, [r0, #77]	@ zero_extendqisi2
 798 0552 7047     		bx	lr
 800              		.align	1
 801              		.global	xQueueIsQueueEmptyFromISR
 802              		.thumb
 803              		.thumb_func
 805              	xQueueIsQueueEmptyFromISR:
 806              		@ args = 0, pretend = 0, frame = 0
 807              		@ frame_needed = 0, uses_anonymous_args = 0
 808              		@ link register save eliminated.
 809 0554 806B     		ldr	r0, [r0, #56]
 810 0556 B0FA80F0 		clz	r0, r0
 811 055a 4009     		lsrs	r0, r0, #5
 812 055c 7047     		bx	lr
 814              		.align	1
 815              		.global	xQueueIsQueueFullFromISR
 816              		.thumb
 817              		.thumb_func
 819              	xQueueIsQueueFullFromISR:
 820              		@ args = 0, pretend = 0, frame = 0
 821              		@ frame_needed = 0, uses_anonymous_args = 0
 822              		@ link register save eliminated.
 823 055e 836B     		ldr	r3, [r0, #56]
 824 0560 C06B     		ldr	r0, [r0, #60]
 825 0562 C31A     		subs	r3, r0, r3
 826 0564 5842     		rsbs	r0, r3, #0
 827 0566 5841     		adcs	r0, r0, r3
 828 0568 7047     		bx	lr
 830              		.align	1
 831              		.global	xQueueCreateSet
 832              		.thumb
 833              		.thumb_func
 835              	xQueueCreateSet:
 836              		@ args = 0, pretend = 0, frame = 0
 837              		@ frame_needed = 0, uses_anonymous_args = 0
 838              		@ link register save eliminated.
 839 056a 0022     		movs	r2, #0
 840 056c 0421     		movs	r1, #4
 841 056e FFF7FEBF 		b	xQueueGenericCreate
 843              		.align	1
 844              		.global	xQueueAddToSet
 845              		.thumb
 846              		.thumb_func
 848              	xQueueAddToSet:
 849              		@ args = 0, pretend = 0, frame = 0
 850              		@ frame_needed = 0, uses_anonymous_args = 0
 851 0572 38B5     		push	{r3, r4, r5, lr}
 852 0574 036D     		ldr	r3, [r0, #80]
 853 0576 0446     		mov	r4, r0
 854 0578 0D46     		mov	r5, r1
 855 057a 43B9     		cbnz	r3, .L163
 856 057c 826B     		ldr	r2, [r0, #56]
 857 057e 32B9     		cbnz	r2, .L163
 858 0580 FFF7FEFF 		bl	vPortEnterCritical
 859 0584 2565     		str	r5, [r4, #80]
 860 0586 FFF7FEFF 		bl	vPortExitCritical
 861 058a 0120     		movs	r0, #1
 862 058c 38BD     		pop	{r3, r4, r5, pc}
 863              	.L163:
 864 058e 0020     		movs	r0, #0
 865 0590 38BD     		pop	{r3, r4, r5, pc}
 867              		.align	1
 868              		.global	xQueueRemoveFromSet
 869              		.thumb
 870              		.thumb_func
 872              	xQueueRemoveFromSet:
 873              		@ args = 0, pretend = 0, frame = 0
 874              		@ frame_needed = 0, uses_anonymous_args = 0
 875 0592 38B5     		push	{r3, r4, r5, lr}
 876 0594 036D     		ldr	r3, [r0, #80]
 877 0596 0446     		mov	r4, r0
 878 0598 8B42     		cmp	r3, r1
 879 059a 08D1     		bne	.L168
 880 059c 856B     		ldr	r5, [r0, #56]
 881 059e 35B9     		cbnz	r5, .L168
 882 05a0 FFF7FEFF 		bl	vPortEnterCritical
 883 05a4 2565     		str	r5, [r4, #80]
 884 05a6 FFF7FEFF 		bl	vPortExitCritical
 885 05aa 0120     		movs	r0, #1
 886 05ac 38BD     		pop	{r3, r4, r5, pc}
 887              	.L168:
 888 05ae 0020     		movs	r0, #0
 889 05b0 38BD     		pop	{r3, r4, r5, pc}
 891              		.align	1
 892              		.global	xQueueSelectFromSet
 893              		.thumb
 894              		.thumb_func
 896              	xQueueSelectFromSet:
 897              		@ args = 0, pretend = 0, frame = 8
 898              		@ frame_needed = 0, uses_anonymous_args = 0
 899 05b2 13B5     		push	{r0, r1, r4, lr}
 900 05b4 0023     		movs	r3, #0
 901 05b6 02AC     		add	r4, sp, #8
 902 05b8 44F8043D 		str	r3, [r4, #-4]!
 903 05bc 0A46     		mov	r2, r1
 904 05be 2146     		mov	r1, r4
 905 05c0 FFF7FEFF 		bl	xQueueGenericReceive
 906 05c4 0198     		ldr	r0, [sp, #4]
 907 05c6 02B0     		add	sp, sp, #8
 908              		@ sp needed
 909 05c8 10BD     		pop	{r4, pc}
 911              		.align	1
 912              		.global	xQueueSelectFromSetFromISR
 913              		.thumb
 914              		.thumb_func
 916              	xQueueSelectFromSetFromISR:
 917              		@ args = 0, pretend = 0, frame = 8
 918              		@ frame_needed = 0, uses_anonymous_args = 0
 919 05ca 07B5     		push	{r0, r1, r2, lr}
 920 05cc 0022     		movs	r2, #0
 921 05ce 02A9     		add	r1, sp, #8
 922 05d0 41F8042D 		str	r2, [r1, #-4]!
 923 05d4 FFF7FEFF 		bl	xQueueReceiveFromISR
 924 05d8 0198     		ldr	r0, [sp, #4]
 925 05da 03B0     		add	sp, sp, #12
 926              		@ sp needed
 927 05dc 5DF804FB 		ldr	pc, [sp], #4
 929              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
DEFINED SYMBOLS
                            *ABS*:00000000 queue.c
     /tmp/ccbDPP9Q.s:17     .text:00000000 $t
     /tmp/ccbDPP9Q.s:21     .text:00000000 prvCopyDataToQueue
     /tmp/ccbDPP9Q.s:80     .text:00000066 prvNotifyQueueSetContainer
     /tmp/ccbDPP9Q.s:115    .text:0000009a prvCopyDataFromQueue
     /tmp/ccbDPP9Q.s:143    .text:000000c0 prvUnlockQueue
     /tmp/ccbDPP9Q.s:208    .text:0000013c xQueueGenericReset
     /tmp/ccbDPP9Q.s:254    .text:00000196 xQueueGenericCreate
     /tmp/ccbDPP9Q.s:299    .text:000001e6 xQueueCreateCountingSemaphore
     /tmp/ccbDPP9Q.s:317    .text:000001f8 xQueueGenericSend
     /tmp/ccbDPP9Q.s:427    .text:000002e0 xQueueCreateMutex
     /tmp/ccbDPP9Q.s:468    .text:0000032c xQueueGenericSendFromISR
     /tmp/ccbDPP9Q.s:531    .text:0000039a xQueueGenericReceive
     /tmp/ccbDPP9Q.s:652    .text:0000049e xQueueReceiveFromISR
     /tmp/ccbDPP9Q.s:698    .text:000004f0 xQueuePeekFromISR
     /tmp/ccbDPP9Q.s:725    .text:00000518 uxQueueMessagesWaiting
     /tmp/ccbDPP9Q.s:741    .text:0000052a uxQueueMessagesWaitingFromISR
     /tmp/ccbDPP9Q.s:753    .text:0000052e vQueueDelete
     /tmp/ccbDPP9Q.s:769    .text:00000542 ucQueueGetQueueNumber
     /tmp/ccbDPP9Q.s:781    .text:00000548 vQueueSetQueueNumber
     /tmp/ccbDPP9Q.s:793    .text:0000054e ucQueueGetQueueType
     /tmp/ccbDPP9Q.s:805    .text:00000554 xQueueIsQueueEmptyFromISR
     /tmp/ccbDPP9Q.s:819    .text:0000055e xQueueIsQueueFullFromISR
     /tmp/ccbDPP9Q.s:835    .text:0000056a xQueueCreateSet
     /tmp/ccbDPP9Q.s:848    .text:00000572 xQueueAddToSet
     /tmp/ccbDPP9Q.s:872    .text:00000592 xQueueRemoveFromSet
     /tmp/ccbDPP9Q.s:896    .text:000005b2 xQueueSelectFromSet
     /tmp/ccbDPP9Q.s:916    .text:000005ca xQueueSelectFromSetFromISR

UNDEFINED SYMBOLS
vTaskPriorityDisinherit
memcpy
xTaskRemoveFromEventList
vPortEnterCritical
vTaskMissedYield
vPortExitCritical
vPortYield
vListInitialise
pvPortMalloc
vPortFree
vTaskSetTimeOutState
vTaskSuspendAll
xTaskCheckForTimeOut
vTaskPlaceOnEventList
xTaskResumeAll
ulPortSetInterruptMask
vPortClearInterruptMask
xTaskGetCurrentTaskHandle
vTaskPriorityInherit
